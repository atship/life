// Ctrl % Shift # Alt &
// LEFT, RIGHT, UP, DOWN, F1 .. F12, HOME, END, PGUP, PGDN
// This code will add a submenu under Tools, and the hotkey is Ctrl + Shift + E
1, menu item:
    @MenuItem("Tools/This is test menu item %#E")
    static function Good()
    {
        Debug.Log("Good item triggered");
    }

2, context menu:
    [ContextMneu("Operate Resource")]
    static function Op()
    {
        Debug.Log("Operate resource");
    }

3, selection:
    class Selection

4, component:
    [ExecuteInEditMode]
    [AddComponentMenu("MyComponent/submenu %#1")]
    class MyComponent
    {
        function OnGUI(){}
        function Update(){}
    }

5, Editor scripts are put into the Editor directory. UnityEditor and UnityEngine are different with each other, 
   if your code will run in editor and runtime, you can trim the code not necessary in runtime using the macro "#if UNITY_EDITOR ... #endif"
   by the way, the code in the Editor folder will compile in the last time, after the other code is compiled

using UnityEditor;

class MyEditorWindow extends EditorWindow
{
    [MenuItem("Window/MyWindow")]
    public static function Instance(){ return EditorWindow.GetWindow(typeof(MyEditorWindow)) as MyEditorWindow; }
}

6, display dialog
    EditorUtility.DisplayDialog(title, content, ok, [cancel])

7, inspector
    [CustomEditor(typeof(MyClass))]
    public MyClassEditor : Editor
    {
        public override void OnInspectorGUI()
        {
            EditorGUILayout.TextField...
            if (GUIButton(label)){...}
        }
        
        MyClass tar_;
        public void OnEnable()
        {
            tar_ = target as MyClass;
        }
    }
    // well, the inspector will re-enable when you click the target that contains the editor.
    // therefore, the data must save in the target, don't save in the editor, it can't serialize
    // even if you indicate the attribute as [Serializable] in the editor.
    
8, popup a editor window
    MyEditorWindowClass win = ScriptableObject.CreateInstance<MyEditorWindowClass>();
    window setup ...
    win.ShowUtility();